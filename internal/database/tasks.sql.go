// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: tasks.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (id, name, isCompleted, user_id) 
VALUES($1, $2, $3, $4)
RETURNING id, name, iscompleted, user_id
`

type CreateTaskParams struct {
	ID          uuid.UUID
	Name        string
	Iscompleted bool
	UserID      uuid.UUID
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.ID,
		arg.Name,
		arg.Iscompleted,
		arg.UserID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Iscompleted,
		&i.UserID,
	)
	return i, err
}

const getUserTasks = `-- name: GetUserTasks :many
SELECT id, name, iscompleted, user_id FROM tasks WHERE user_id = $1
`

func (q *Queries) GetUserTasks(ctx context.Context, userID uuid.UUID) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getUserTasks, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Iscompleted,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
