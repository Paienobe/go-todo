// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, name, email, created_at, apikey)
VALUES($1, $2, $3, $4, encode(sha256(random()::text::bytea), 'hex'))
RETURNING id, name, email, created_at, apikey
`

type CreateUserParams struct {
	ID        uuid.UUID
	Name      string
	Email     string
	CreatedAt time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.CreatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.Apikey,
	)
	return i, err
}

const getUserByApiKey = `-- name: GetUserByApiKey :one
SELECT id, name, email, created_at, apikey FROM users WHERE apikey = $1
`

func (q *Queries) GetUserByApiKey(ctx context.Context, apikey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByApiKey, apikey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.Apikey,
	)
	return i, err
}

const getUserByNameAndEmail = `-- name: GetUserByNameAndEmail :one
SELECT id, name, email, created_at, apikey FROM users WHERE name = $1 AND email = $2
`

type GetUserByNameAndEmailParams struct {
	Name  string
	Email string
}

func (q *Queries) GetUserByNameAndEmail(ctx context.Context, arg GetUserByNameAndEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByNameAndEmail, arg.Name, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.Apikey,
	)
	return i, err
}
